class K{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new a);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new a);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new K);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],l=s[2],c=s[3],h=s[4],u=s[5],d=s[6],f=s[7],p=s[8],m=n[0],y=n[1],w=n[2],v=n[3],g=n[4],x=n[5],E=n[6],z=n[7],M=n[8];return i[0]=o*m+r*v+l*E,i[1]=o*y+r*g+l*z,i[2]=o*w+r*x+l*M,i[3]=c*m+h*v+u*E,i[4]=c*y+h*g+u*z,i[5]=c*w+h*x+u*M,i[6]=d*m+f*v+p*E,i[7]=d*y+f*g+p*z,i[8]=d*w+f*x+p*M,e}scale(t,e){e===void 0&&(e=new K);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new a);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let l=3;const c=l;let h;const u=4;let d;do{if(o=c-l,i[o+n*o]===0){for(r=o+1;r<c;r++)if(i[o+n*r]!==0){h=u;do d=u-h,i[d+n*o]+=i[d+n*r];while(--h);break}}if(i[o+n*o]!==0)for(r=o+1;r<c;r++){const f=i[o+n*r]/i[o+n*o];h=u;do d=u-h,i[d+n*r]=d<=o?0:i[d+n*r]-i[d+n*o]*f;while(--h)}}while(--l);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new K);const e=3,s=6,n=be;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const l=r;let c;const h=s;let u;do{if(i=l-r,n[i+s*i]===0){for(o=i+1;o<l;o++)if(n[i+s*o]!==0){c=h;do u=h-c,n[u+s*i]+=n[u+s*o];while(--c);break}}if(n[i+s*i]!==0)for(o=i+1;o<l;o++){const d=n[i+s*o]/n[i+s*i];c=h;do u=h-c,n[u+s*o]=u<=i?0:n[u+s*o]-n[u+s*i]*d;while(--c)}}while(--r);i=2;do{o=i-1;do{const d=n[i+s*o]/n[i+s*i];c=s;do u=s-c,n[u+s*o]=n[u+s*o]-n[u+s*i]*d;while(--c)}while(o--)}while(--i);i=2;do{const d=1/n[i+s*i];c=s;do u=s-c,n[u+s*i]=n[u+s*i]*d;while(--c)}while(i--);i=2;do{o=2;do{if(u=n[e+o+s*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,l=n+n,c=e*o,h=e*r,u=e*l,d=s*r,f=s*l,p=n*l,m=i*o,y=i*r,w=i*l,v=this.elements;return v[3*0+0]=1-(d+p),v[3*0+1]=h-w,v[3*0+2]=u+y,v[3*1+0]=h+w,v[3*1+1]=1-(c+p),v[3*1+2]=f-m,v[3*2+0]=u-y,v[3*2+1]=f+m,v[3*2+2]=1-(c+d),this}transpose(t){t===void 0&&(t=new K);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const be=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class a{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new a);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,l=this.z;return e.x=r*i-l*n,e.y=l*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new a(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new a(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new K([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new a);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new a);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new a),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new a),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new a),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=Ee,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=Ce;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(Ot),Ot.almostEquals(t,e)}clone(){return new a(this.x,this.y,this.z)}}a.ZERO=new a(0,0,0);a.UNIT_X=new a(1,0,0);a.UNIT_Y=new a(0,1,0);a.UNIT_Z=new a(0,0,1);const Ee=new a,Ce=new a,Ot=new a;class X{constructor(t){t===void 0&&(t={}),this.lowerBound=new a,this.upperBound=new a,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let l=1;l<t.length;l++){let c=t[l];r&&(r.vmult(c,Ht),c=Ht),c.x>o.x&&(o.x=c.x),c.x<i.x&&(i.x=c.x),c.y>o.y&&(o.y=c.y),c.y<i.y&&(i.y=c.y),c.z>o.z&&(o.z=c.z),c.z<i.z&&(i.z=c.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new X().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,l=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&l}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,l){const c=this.lowerBound,h=this.upperBound;t.copy(c),e.set(h.x,c.y,c.z),s.set(h.x,h.y,c.z),n.set(c.x,h.y,h.z),i.set(h.x,c.y,h.z),o.set(c.x,h.y,c.z),r.set(c.x,c.y,h.z),l.copy(h)}toLocalFrame(t,e){const s=Dt,n=s[0],i=s[1],o=s[2],r=s[3],l=s[4],c=s[5],h=s[6],u=s[7];this.getCorners(n,i,o,r,l,c,h,u);for(let d=0;d!==8;d++){const f=s[d];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=Dt,n=s[0],i=s[1],o=s[2],r=s[3],l=s[4],c=s[5],h=s[6],u=s[7];this.getCorners(n,i,o,r,l,c,h,u);for(let d=0;d!==8;d++){const f=s[d];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,l=(this.upperBound.x-s.x)*n,c=(this.lowerBound.y-s.y)*i,h=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,d=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,l),Math.min(c,h)),Math.min(u,d)),p=Math.min(Math.min(Math.max(r,l),Math.max(c,h)),Math.max(u,d));return!(p<0||f>p)}}const Ht=new a,Dt=[new a,new a,new a,new a,new a,new a,new a,new a];class Gt{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class ue{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class O{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new a),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=ze,n=Se;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new O);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,l=t.y,c=t.z,h=t.w;return e.x=s*h+o*r+n*c-i*l,e.y=n*h+o*l+i*r-s*c,e.z=i*h+o*c+s*l-n*r,e.w=o*h-s*r-n*l-i*c,e}inverse(t){t===void 0&&(t=new O);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new O),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new a);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,l=this.z,c=this.w,h=c*s+r*i-l*n,u=c*n+l*s-o*i,d=c*i+o*n-r*s,f=-o*s-r*n-l*i;return e.x=h*c+f*-o+u*-l-d*-r,e.y=u*c+f*-r+d*-o-h*-l,e.z=d*c+f*-l+h*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,l=this.z,c=this.w;switch(e){case"YZX":const h=o*r+l*c;if(h>.499&&(s=2*Math.atan2(o,c),n=Math.PI/2,i=0),h<-.499&&(s=-2*Math.atan2(o,c),n=-Math.PI/2,i=0),s===void 0){const u=o*o,d=r*r,f=l*l;s=Math.atan2(2*r*c-2*o*l,1-2*d-2*f),n=Math.asin(2*h),i=Math.atan2(2*o*c-2*r*l,1-2*u-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),l=Math.sin(t/2),c=Math.sin(e/2),h=Math.sin(s/2);return n==="XYZ"?(this.x=l*o*r+i*c*h,this.y=i*c*r-l*o*h,this.z=i*o*h+l*c*r,this.w=i*o*r-l*c*h):n==="YXZ"?(this.x=l*o*r+i*c*h,this.y=i*c*r-l*o*h,this.z=i*o*h-l*c*r,this.w=i*o*r+l*c*h):n==="ZXY"?(this.x=l*o*r-i*c*h,this.y=i*c*r+l*o*h,this.z=i*o*h+l*c*r,this.w=i*o*r-l*c*h):n==="ZYX"?(this.x=l*o*r-i*c*h,this.y=i*c*r+l*o*h,this.z=i*o*h-l*c*r,this.w=i*o*r+l*c*h):n==="YZX"?(this.x=l*o*r+i*c*h,this.y=i*c*r+l*o*h,this.z=i*o*h-l*c*r,this.w=i*o*r-l*c*h):n==="XZY"&&(this.x=l*o*r-i*c*h,this.y=i*c*r-l*o*h,this.z=i*o*h+l*c*r,this.w=i*o*r+l*c*h),this}clone(){return new O(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new O);const n=this.x,i=this.y,o=this.z,r=this.w;let l=t.x,c=t.y,h=t.z,u=t.w,d,f,p,m,y;return f=n*l+i*c+o*h+r*u,f<0&&(f=-f,l=-l,c=-c,h=-h,u=-u),1-f>1e-6?(d=Math.acos(f),p=Math.sin(d),m=Math.sin((1-e)*d)/p,y=Math.sin(e*d)/p):(m=1-e,y=e),s.x=m*n+y*l,s.y=m*i+y*c,s.z=m*o+y*h,s.w=m*r+y*u,s}integrate(t,e,s,n){n===void 0&&(n=new O);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,l=this.x,c=this.y,h=this.z,u=this.w,d=e*.5;return n.x+=d*(i*u+o*h-r*c),n.y+=d*(o*u+r*l-i*h),n.z+=d*(r*u+i*c-o*l),n.w+=d*(-i*l-o*c-r*h),n}}const ze=new a,Se=new a,Ae={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class I{constructor(t){t===void 0&&(t={}),this.id=I.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}I.idCounter=0;I.types=Ae;class V{constructor(t){t===void 0&&(t={}),this.position=new a,this.quaternion=new O,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return V.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return V.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new a),s.vsub(t,n),e.conjugate(Yt),Yt.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new a),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new a),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new a),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const Yt=new O;class ot extends I{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:I.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new a;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let l=0;l!==r;l++){const c=(l+1)%r;e[o[l]].vsub(e[o[c]],n),n.normalize();let h=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){h=!0;break}h||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new a;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];ot.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new a,o=new a;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,l,c){const h=new a;let u=-1,d=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){h.copy(s.faceNormals[p]),i.vmult(h,h);const m=h.dot(o);m>d&&(d=m,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const m=s.vertices[s.faces[u][p]],y=new a;y.copy(m),i.vmult(y,y),n.vadd(y,y),f.push(y)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,l,c)}findSeparatingAxis(t,e,s,n,i,o,r,l){const c=new a,h=new a,u=new a,d=new a,f=new a,p=new a;let m=Number.MAX_VALUE;const y=this;if(y.uniqueAxes)for(let w=0;w!==y.uniqueAxes.length;w++){s.vmult(y.uniqueAxes[w],c);const v=y.testSepAxis(c,t,e,s,n,i);if(v===!1)return!1;v<m&&(m=v,o.copy(c))}else{const w=r?r.length:y.faces.length;for(let v=0;v<w;v++){const g=r?r[v]:v;c.copy(y.faceNormals[g]),s.vmult(c,c);const x=y.testSepAxis(c,t,e,s,n,i);if(x===!1)return!1;x<m&&(m=x,o.copy(c))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],h);const v=y.testSepAxis(h,t,e,s,n,i);if(v===!1)return!1;v<m&&(m=v,o.copy(h))}else{const w=l?l.length:t.faces.length;for(let v=0;v<w;v++){const g=l?l[v]:v;h.copy(t.faceNormals[g]),i.vmult(h,h);const x=y.testSepAxis(h,t,e,s,n,i);if(x===!1)return!1;x<m&&(m=x,o.copy(h))}}for(let w=0;w!==y.uniqueEdges.length;w++){s.vmult(y.uniqueEdges[w],d);for(let v=0;v!==t.uniqueEdges.length;v++)if(i.vmult(t.uniqueEdges[v],f),d.cross(f,p),!p.almostZero()){p.normalize();const g=y.testSepAxis(p,t,e,s,n,i);if(g===!1)return!1;g<m&&(m=g,o.copy(p))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;ot.project(r,t,s,n,Bt),ot.project(e,t,i,o,Nt);const l=Bt[0],c=Bt[1],h=Nt[0],u=Nt[1];if(l<u||h<c)return!1;const d=l-u,f=h-c;return d<f?d:f}calculateLocalInertia(t,e){const s=new a,n=new a;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const l=new a,c=new a,h=new a,u=new a,d=new a,f=new a,p=new a,m=new a,y=this,w=[],v=n,g=w;let x=-1,E=Number.MAX_VALUE;for(let B=0;B<y.faces.length;B++){l.copy(y.faceNormals[B]),s.vmult(l,l);const P=l.dot(t);P<E&&(E=P,x=B)}if(x<0)return;const z=y.faces[x];z.connectedFaces=[];for(let B=0;B<y.faces.length;B++)for(let P=0;P<y.faces[B].length;P++)z.indexOf(y.faces[B][P])!==-1&&B!==x&&z.connectedFaces.indexOf(B)===-1&&z.connectedFaces.push(B);const M=z.length;for(let B=0;B<M;B++){const P=y.vertices[z[B]],q=y.vertices[z[(B+1)%M]];P.vsub(q,c),h.copy(c),s.vmult(h,h),e.vadd(h,h),u.copy(this.faceNormals[x]),s.vmult(u,u),e.vadd(u,u),h.cross(u,d),d.negate(d),f.copy(P),s.vmult(f,f),e.vadd(f,f);const b=z.connectedFaces[B];p.copy(this.faceNormals[b]);const A=this.getPlaneConstantOfFace(b);m.copy(p),s.vmult(m,m);const S=A-m.dot(e);for(this.clipFaceAgainstPlane(v,g,m,S);v.length;)v.shift();for(;g.length;)v.push(g.shift())}p.copy(this.faceNormals[x]);const N=this.getPlaneConstantOfFace(x);m.copy(p),s.vmult(m,m);const _=N-m.dot(e);for(let B=0;B<v.length;B++){let P=m.dot(v[B])+_;if(P<=i&&(console.log(`clamped: depth=${P} to minDist=${i}`),P=i),P<=o){const q=v[B];if(P<=1e-6){const b={point:q,normal:m,depth:P};r.push(b)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let l=t[t.length-1],c=t[0];i=s.dot(l)+n;for(let h=0;h<r;h++){if(c=t[h],o=s.dot(c)+n,i<0)if(o<0){const u=new a;u.copy(c),e.push(u)}else{const u=new a;l.lerp(c,i/(i-o),u),e.push(u)}else if(o<0){const u=new a;l.lerp(c,i/(i-o),u),e.push(u),e.push(c)}l=c,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new a);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new a);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,l,c,h,u,d=new a;for(let f=0;f<i.length;f++){d.copy(i[f]),e.vmult(d,d),t.vadd(d,d);const p=d;(o===void 0||p.x<o)&&(o=p.x),(c===void 0||p.x>c)&&(c=p.x),(r===void 0||p.y<r)&&(r=p.y),(h===void 0||p.y>h)&&(h=p.y),(l===void 0||p.z<l)&&(l=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(o,r,l),n.set(c,h,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new a);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=null,o=new a;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let l=n[r];const c=e[s[r][0]],h=new a;t.vsub(c,h);const u=l.dot(h),d=new a;o.vsub(c,d);const f=l.dot(d);if(u<0&&f>0||u>0&&f<0)return!1}return i?1:-1}static project(t,e,s,n,i){const o=t.vertices.length,r=Ie;let l=0,c=0;const h=Me,u=t.vertices;h.setZero(),V.vectorToLocalFrame(s,n,e,r),V.pointToLocalFrame(s,n,h,h);const d=h.dot(r);c=l=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>l&&(l=p),p<c&&(c=p)}if(c-=d,l-=d,c>l){const f=c;c=l,l=f}i[0]=l,i[1]=c}}const Bt=[],Nt=[];new a;const Ie=new a,Me=new a;class qt extends I{constructor(t){super({type:I.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=a,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],l=new ot({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=l,l.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new a),qt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)it.set(i[o][0],i[o][1],i[o][2]),e.vmult(it,it),t.vadd(it,it),s(it.x,it.y,it.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;Z[0].set(i.x,i.y,i.z),Z[1].set(-i.x,i.y,i.z),Z[2].set(-i.x,-i.y,i.z),Z[3].set(-i.x,-i.y,-i.z),Z[4].set(i.x,-i.y,-i.z),Z[5].set(i.x,i.y,-i.z),Z[6].set(-i.x,i.y,-i.z),Z[7].set(i.x,-i.y,i.z);const o=Z[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const l=Z[r];e.vmult(l,l),t.vadd(l,l);const c=l.x,h=l.y,u=l.z;c>n.x&&(n.x=c),h>n.y&&(n.y=h),u>n.z&&(n.z=u),c<s.x&&(s.x=c),h<s.y&&(s.y=h),u<s.z&&(s.z=u)}}}const it=new a,Z=[new a,new a,new a,new a,new a,new a,new a,new a],Wt={DYNAMIC:1,STATIC:2,KINEMATIC:4},Vt={AWAKE:0,SLEEPY:1,SLEEPING:2};class F extends ue{constructor(t){t===void 0&&(t={}),super(),this.id=F.idCounter++,this.index=-1,this.world=null,this.vlambda=new a,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new a,this.previousPosition=new a,this.interpolatedPosition=new a,this.initPosition=new a,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new a,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new a,this.force=new a;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?F.STATIC:F.DYNAMIC,typeof t.type==typeof F.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=F.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new a,this.quaternion=new O,this.initQuaternion=new O,this.previousQuaternion=new O,this.interpolatedQuaternion=new O,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new a,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new a,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new a,this.invInertia=new a,this.invInertiaWorld=new K,this.invMassSolve=0,this.invInertiaSolve=new a,this.invInertiaWorldSolve=new K,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new a(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new a(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new X,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new a,this.isTrigger=!!t.isTrigger,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=F.AWAKE,this.wakeUpAfterNarrowphase=!1,t===F.SLEEPING&&this.dispatchEvent(F.wakeupEvent)}sleep(){this.sleepState=F.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===F.AWAKE&&s<n?(this.sleepState=F.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(F.sleepyEvent)):e===F.SLEEPY&&s>n?this.wakeUp():e===F.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(F.sleepEvent))}}updateSolveMassProperties(){this.sleepState===F.SLEEPING||this.type===F.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new a),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new a),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new a,i=new O;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),l=o.boundingSphereRadius;r+l>n&&(n=r+l)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=Fe,o=Re,r=this.quaternion,l=this.aabb,c=Be;for(let h=0;h!==n;h++){const u=t[h];r.vmult(e[h],i),i.vadd(this.position,i),r.mult(s[h],o),u.calculateWorldAABB(i,o,c.lowerBound,c.upperBound),h===0?l.copy(c):l.extend(c)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=Ne,n=Te;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new a),this.type!==F.DYNAMIC)return;this.sleepState===F.SLEEPING&&this.wakeUp();const s=_e;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new a),this.type!==F.DYNAMIC)return;const s=Le,n=qe;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===F.DYNAMIC&&(this.sleepState===F.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new a),this.type!==F.DYNAMIC)return;this.sleepState===F.SLEEPING&&this.wakeUp();const s=e,n=We;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=Ve;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new a),this.type!==F.DYNAMIC)return;const s=je,n=ke;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=Oe;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),qt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new a;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===F.DYNAMIC||this.type===F.KINEMATIC)||this.sleepState===F.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,l=this.torque,c=this.quaternion,h=this.invMass,u=this.invInertiaWorld,d=this.linearFactor,f=h*t;n.x+=r.x*f*d.x,n.y+=r.y*f*d.y,n.z+=r.z*f*d.z;const p=u.elements,m=this.angularFactor,y=l.x*m.x,w=l.y*m.y,v=l.z*m.z;i.x+=t*(p[0]*y+p[1]*w+p[2]*v),i.y+=t*(p[3]*y+p[4]*w+p[5]*v),i.z+=t*(p[6]*y+p[7]*w+p[8]*v),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,c.integrate(this.angularVelocity,t,this.angularFactor,c),e&&(s?c.normalizeFast():c.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}F.idCounter=0;F.COLLIDE_EVENT_NAME="collide";F.DYNAMIC=Wt.DYNAMIC;F.STATIC=Wt.STATIC;F.KINEMATIC=Wt.KINEMATIC;F.AWAKE=Vt.AWAKE;F.SLEEPY=Vt.SLEEPY;F.SLEEPING=Vt.SLEEPING;F.wakeupEvent={type:"wakeup"};F.sleepyEvent={type:"sleepy"};F.sleepEvent={type:"sleep"};const Fe=new a,Re=new O,Be=new X,Ne=new K,Te=new K,Pe=new K,_e=new a,Le=new a,qe=new a,We=new a,Ve=new a,je=new a,ke=new a,Oe=new a;class pe{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!(!(t.collisionFilterGroup&e.collisionFilterMask)||!(e.collisionFilterGroup&t.collisionFilterMask)||(t.type&F.STATIC||t.sleepState===F.SLEEPING)&&(e.type&F.STATIC||e.sleepState===F.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=He;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=De,n=Ge,i=Ye,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const l=n[r].id,c=i[r].id,h=l<c?`${l},${c}`:`${c},${l}`;s[h]=r,s.keys.push(h)}for(let r=0;r!==s.keys.length;r++){const l=s.keys.pop(),c=s[l];t.push(n[c]),e.push(i[c]),delete s[l]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new a;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const He=new a;new a;new O;new a;const De={keys:[]},Ge=[],Ye=[];new a;new a;new a;class Ue extends pe{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let l=0;l!==i;l++)for(let c=0;c!==l;c++)o=n[l],r=n[c],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class yt{constructor(){this.rayFromWorld=new a,this.rayToWorld=new a,this.hitNormalWorld=new a,this.hitPointWorld=new a,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let fe,me,ve,ye,we,ge,xe;const jt={CLOSEST:1,ANY:2,ALL:4};fe=I.types.SPHERE;me=I.types.PLANE;ve=I.types.BOX;ye=I.types.CYLINDER;we=I.types.CONVEXPOLYHEDRON;ge=I.types.HEIGHTFIELD;xe=I.types.TRIMESH;class H{get[fe](){return this._intersectSphere}get[me](){return this._intersectPlane}get[ve](){return this._intersectBox}get[ye](){return this._intersectConvex}get[we](){return this._intersectConvex}get[ge](){return this._intersectHeightfield}get[xe](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new a),e===void 0&&(e=new a),this.from=t.clone(),this.to=e.clone(),this.direction=new a,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=H.ANY,this.result=new yt,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||H.ANY,this.result=e.result||new yt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Ut),Tt.length=0,t.broadphase.aabbQuery(t,Ut,Tt),this.intersectBodies(Tt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||!(this.collisionFilterGroup&t.collisionFilterMask)||!(t.collisionFilterGroup&this.collisionFilterMask))return;const n=Xe,i=$e;for(let o=0,r=t.shapes.length;o<r;o++){const l=t.shapes[o];if(!(s&&!l.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(l,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(as(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,l=this.direction,c=new a(0,0,1);e.vmult(c,c);const h=new a;o.vsub(s,h);const u=h.dot(c);r.vsub(s,h);const d=h.dot(c);if(u*d>0||o.distanceTo(r)<u)return;const f=c.dot(l);if(Math.abs(f)<this.precision)return;const p=new a,m=new a,y=new a;o.vsub(s,p);const w=-c.dot(p)/f;l.scale(w,m),o.vadd(m,y),this.reportIntersection(c,y,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=Ke;o.from.copy(this.from),o.to.copy(this.to),V.pointToLocalFrame(s,e,o.from,o.from),V.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=Ze;let l,c,h,u;l=c=0,h=u=t.data.length-1;const d=new X;o.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),l=Math.max(l,r[0]),c=Math.max(c,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),h=Math.min(h,r[0]+1),u=Math.min(u,r[1]+1);for(let f=l;f<h;f++)for(let p=c;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,d),!!d.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),V.pointToWorldFrame(s,e,t.pillarOffset,bt),this._intersectConvex(t.pillarConvex,e,bt,n,i,Xt),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),V.pointToWorldFrame(s,e,t.pillarOffset,bt),this._intersectConvex(t.pillarConvex,e,bt,n,i,Xt)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,l=t.radius,c=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,h=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-l**2,d=h**2-4*c*u,f=Je,p=Qe;if(!(d<0))if(d===0)o.lerp(r,d,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const m=(-h-Math.sqrt(d))/(2*c),y=(-h+Math.sqrt(d))/(2*c);if(m>=0&&m<=1&&(o.lerp(r,m,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;y>=0&&y<=1&&(o.lerp(r,y,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=ts,l=$t,c=o&&o.faceList||null,h=t.faces,u=t.vertices,d=t.faceNormals,f=this.direction,p=this.from,m=this.to,y=p.distanceTo(m),w=c?c.length:h.length,v=this.result;for(let g=0;!v.shouldStop&&g<w;g++){const x=c?c[g]:g,E=h[x],z=d[x],M=e,N=s;l.copy(u[E[0]]),M.vmult(l,l),l.vadd(N,l),l.vsub(p,l),M.vmult(z,r);const _=f.dot(r);if(Math.abs(_)<this.precision)continue;const B=r.dot(l)/_;if(!(B<0)){f.scale(B,U),U.vadd(p,U),$.copy(u[E[0]]),M.vmult($,$),N.vadd($,$);for(let P=1;!v.shouldStop&&P<E.length-1;P++){J.copy(u[E[P]]),Q.copy(u[E[P+1]]),M.vmult(J,J),M.vmult(Q,Q),N.vadd(J,J),N.vadd(Q,Q);const q=U.distanceTo(p);!(H.pointInTriangle(U,$,J,Q)||H.pointInTriangle(U,J,$,Q))||q>y||this.reportIntersection(r,U,i,n,x)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=es,l=ls,c=cs,h=$t,u=ss,d=ns,f=is,p=rs,m=os,y=t.indices;t.vertices;const w=this.from,v=this.to,g=this.direction;c.position.copy(s),c.quaternion.copy(e),V.vectorToLocalFrame(s,e,g,u),V.pointToLocalFrame(s,e,w,d),V.pointToLocalFrame(s,e,v,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,f.vsub(d,u),u.normalize();const x=d.distanceSquared(f);t.tree.rayQuery(this,c,l);for(let E=0,z=l.length;!this.result.shouldStop&&E!==z;E++){const M=l[E];t.getNormal(M,r),t.getVertex(y[M*3],$),$.vsub(d,h);const N=u.dot(r),_=r.dot(h)/N;if(_<0)continue;u.scale(_,U),U.vadd(d,U),t.getVertex(y[M*3+1],J),t.getVertex(y[M*3+2],Q);const B=U.distanceSquared(d);!(H.pointInTriangle(U,J,$,Q)||H.pointInTriangle(U,$,J,Q))||B>x||(V.vectorToWorldFrame(e,r,m),V.pointToWorldFrame(s,e,U,p),this.reportIntersection(m,p,i,n,M))}l.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,l=o.distanceTo(e),c=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(c.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case H.ALL:this.hasHit=!0,c.set(o,r,t,e,s,n,l),c.hasHit=!0,this.callback(c);break;case H.CLOSEST:(l<c.distance||!c.hasHit)&&(this.hasHit=!0,c.hasHit=!0,c.set(o,r,t,e,s,n,l));break;case H.ANY:this.hasHit=!0,c.hasHit=!0,c.set(o,r,t,e,s,n,l),c.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,lt),s.vsub(e,dt),t.vsub(e,Pt);const i=lt.dot(lt),o=lt.dot(dt),r=lt.dot(Pt),l=dt.dot(dt),c=dt.dot(Pt);let h,u;return(h=l*r-o*c)>=0&&(u=i*c-o*r)>=0&&h+u<i*l-o*o}}H.CLOSEST=jt.CLOSEST;H.ANY=jt.ANY;H.ALL=jt.ALL;const Ut=new X,Tt=[],dt=new a,Pt=new a,Xe=new a,$e=new O,U=new a,$=new a,J=new a,Q=new a;new a;new yt;const Xt={faceList:[0]},bt=new a,Ke=new H,Ze=[],Je=new a,Qe=new a,ts=new a;new a;new a;const $t=new a,es=new a,ss=new a,ns=new a,is=new a,os=new a,rs=new a;new X;const ls=[],cs=new V,lt=new a,Et=new a;function as(R,t,e){e.vsub(R,lt);const s=lt.dot(t);return t.scale(s,Et),Et.vadd(R,Et),e.distanceTo(Et)}class mt extends pe{static checkBounds(t,e,s){let n,i;s===0?(n=t.position.x,i=e.position.x):s===1?(n=t.position.y,i=e.position.y):s===2&&(n=t.position.z,i=e.position.z);const o=t.boundingRadius,r=e.boundingRadius,l=n+o;return i-r<l}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.x<=n.aabb.lowerBound.x);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.y<=n.aabb.lowerBound.y);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.z<=n.aabb.lowerBound.z);i--)t[i+1]=t[i];t[i+1]=n}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=s=>{e.push(s.body)},this._removeBodyHandler=s=>{const n=e.indexOf(s.body);n!==-1&&e.splice(n,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const n=this.axisList,i=n.length,o=this.axisIndex;let r,l;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==i;r++){const c=n[r];for(l=r+1;l<i;l++){const h=n[l];if(this.needBroadphaseCollision(c,h)){if(!mt.checkBounds(c,h,o))break;this.intersectionTest(c,h,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let n=0;n!==s;n++){const i=t[n];i.aabbNeedsUpdate&&i.updateAABB()}e===0?mt.insertionSortX(t):e===1?mt.insertionSortY(t):e===2&&mt.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,n=0,i=0,o=0;const r=this.axisList,l=r.length,c=1/l;for(let f=0;f!==l;f++){const p=r[f],m=p.position.x;t+=m,e+=m*m;const y=p.position.y;s+=y,n+=y*y;const w=p.position.z;i+=w,o+=w*w}const h=e-t*t*c,u=n-s*s*c,d=o-i*i*c;h>u?h>d?this.axisIndex=0:this.axisIndex=2:u>d?this.axisIndex=1:this.axisIndex=2}aabbQuery(t,e,s){s===void 0&&(s=[]),this.dirty&&(this.sortList(),this.dirty=!1);const n=this.axisIndex;let i="x";n===1&&(i="y"),n===2&&(i="z");const o=this.axisList;e.lowerBound[i],e.upperBound[i];for(let r=0;r<o.length;r++){const l=o[r];l.aabbNeedsUpdate&&l.updateAABB(),l.aabb.overlaps(e)&&s.push(l)}return s}}class At{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class wt{constructor(t,e,s){s===void 0&&(s={}),s=At.defaults(s,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=wt.idCounter++,this.collideConnected=s.collideConnected,s.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}wt.idCounter=0;class Kt{constructor(){this.spatial=new a,this.rotational=new a}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class gt{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=gt.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Kt,this.jacobianElementB=new Kt,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,l=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,l)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,l=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,l)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,l=n.torque,c=s.invMassSolve,h=n.invMassSolve;return i.scale(c,Zt),r.scale(h,Jt),s.invInertiaWorldSolve.vmult(o,Qt),n.invInertiaWorldSolve.vmult(l,te),t.multiplyVectors(Zt,Qt)+e.multiplyVectors(Jt,te)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,l=n.invInertiaWorldSolve;let c=i+o;return r.vmult(t.rotational,Ct),c+=Ct.dot(t.rotational),l.vmult(e.rotational,Ct),c+=Ct.dot(e.rotational),c}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=hs;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}gt.idCounter=0;const Zt=new a,Jt=new a,Qt=new a,te=new a,Ct=new a,hs=new a;class vt extends gt{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new a,this.rj=new a,this.ni=new a}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,l=ds,c=us,h=n.velocity,u=n.angularVelocity;n.force,n.torque;const d=i.velocity,f=i.angularVelocity;i.force,i.torque;const p=ps,m=this.jacobianElementA,y=this.jacobianElementB,w=this.ni;o.cross(w,l),r.cross(w,c),w.negate(m.spatial),l.negate(m.rotational),y.spatial.copy(w),y.rotational.copy(c),p.copy(i.position),p.vadd(r,p),p.vsub(n.position,p),p.vsub(o,p);const v=w.dot(p),g=this.restitution+1,x=g*d.dot(w)-g*h.dot(w)+f.dot(c)-u.dot(l),E=this.computeGiMf();return-v*e-x*s-t*E}getImpactVelocityAlongNormal(){const t=fs,e=ms,s=vs,n=ys,i=ws;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const ds=new a,us=new a,ps=new a,fs=new a,ms=new a,vs=new a,ys=new a,ws=new a;class Ci extends wt{constructor(t,e,s,n,i){e===void 0&&(e=new a),n===void 0&&(n=new a),i===void 0&&(i=1e6),super(t,s),this.pivotA=e.clone(),this.pivotB=n.clone();const o=this.equationX=new vt(t,s),r=this.equationY=new vt(t,s),l=this.equationZ=new vt(t,s);this.equations.push(o,r,l),o.minForce=r.minForce=l.minForce=-i,o.maxForce=r.maxForce=l.maxForce=i,o.ni.set(1,0,0),r.ni.set(0,1,0),l.ni.set(0,0,1)}update(){const t=this.bodyA,e=this.bodyB,s=this.equationX,n=this.equationY,i=this.equationZ;t.quaternion.vmult(this.pivotA,s.ri),e.quaternion.vmult(this.pivotB,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj)}}new a;new a;new a;new a;new a;new a;class zi extends wt{constructor(t,e,s,n){n===void 0&&(n=1e6),super(t,e),typeof s>"u"&&(s=t.position.distanceTo(e.position)),this.distance=s;const i=this.distanceEquation=new vt(t,e);this.equations.push(i),i.minForce=-n,i.maxForce=n}update(){const t=this.bodyA,e=this.bodyB,s=this.distanceEquation,n=this.distance*.5,i=s.ni;e.position.vsub(t.position,i),i.normalize(),i.scale(n,s.ri),i.scale(-n,s.rj)}}new a;new a;new a;new a;class ee extends gt{constructor(t,e,s){super(t,e,-s,s),this.ri=new a,this.rj=new a,this.t=new a}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=gs,o=xs,r=this.t;s.cross(r,i),n.cross(r,o);const l=this.jacobianElementA,c=this.jacobianElementB;r.negate(l.spatial),i.negate(l.rotational),c.spatial.copy(r),c.rotational.copy(o);const h=this.computeGW(),u=this.computeGiMf();return-h*e-t*u}}const gs=new a,xs=new a;class It{constructor(t,e,s){s=At.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=It.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}It.idCounter=0;class Mt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=Mt.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}Mt.idCounter=0;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;class bs{constructor(t){t===void 0&&(t={}),t=At.defaults(t,{chassisConnectionPointLocal:new a,chassisConnectionPointWorld:new a,directionLocal:new a,directionWorld:new a,axleLocal:new a,axleWorld:new a,suspensionRestLength:1,suspensionMaxLength:2,radius:1,suspensionStiffness:100,dampingCompression:10,dampingRelaxation:10,frictionSlip:10.5,forwardAcceleration:1,sideAcceleration:1,steering:0,rotation:0,deltaRotation:0,rollInfluence:.01,maxSuspensionForce:Number.MAX_VALUE,isFrontWheel:!0,clippedInvContactDotSuspension:1,suspensionRelativeVelocity:0,suspensionForce:0,slipInfo:0,skidInfo:0,suspensionLength:0,maxSuspensionTravel:1,useCustomSlidingRotationalSpeed:!1,customSlidingRotationalSpeed:-.1}),this.maxSuspensionTravel=t.maxSuspensionTravel,this.customSlidingRotationalSpeed=t.customSlidingRotationalSpeed,this.useCustomSlidingRotationalSpeed=t.useCustomSlidingRotationalSpeed,this.sliding=!1,this.chassisConnectionPointLocal=t.chassisConnectionPointLocal.clone(),this.chassisConnectionPointWorld=t.chassisConnectionPointWorld.clone(),this.directionLocal=t.directionLocal.clone(),this.directionWorld=t.directionWorld.clone(),this.axleLocal=t.axleLocal.clone(),this.axleWorld=t.axleWorld.clone(),this.suspensionRestLength=t.suspensionRestLength,this.suspensionMaxLength=t.suspensionMaxLength,this.radius=t.radius,this.suspensionStiffness=t.suspensionStiffness,this.dampingCompression=t.dampingCompression,this.dampingRelaxation=t.dampingRelaxation,this.frictionSlip=t.frictionSlip,this.forwardAcceleration=t.forwardAcceleration,this.sideAcceleration=t.sideAcceleration,this.steering=0,this.rotation=0,this.deltaRotation=0,this.rollInfluence=t.rollInfluence,this.maxSuspensionForce=t.maxSuspensionForce,this.engineForce=0,this.brake=0,this.isFrontWheel=t.isFrontWheel,this.clippedInvContactDotSuspension=1,this.suspensionRelativeVelocity=0,this.suspensionForce=0,this.slipInfo=0,this.skidInfo=0,this.suspensionLength=0,this.sideImpulse=0,this.forwardImpulse=0,this.raycastResult=new yt,this.worldTransform=new V,this.isInContact=!1}updateWheel(t){const e=this.raycastResult;if(this.isInContact){const s=e.hitNormalWorld.dot(e.directionWorld);e.hitPointWorld.vsub(t.position,ne),t.getVelocityAtWorldPoint(ne,se);const n=e.hitNormalWorld.dot(se);if(s>=-.1)this.suspensionRelativeVelocity=0,this.clippedInvContactDotSuspension=1/.1;else{const i=-1/s;this.suspensionRelativeVelocity=n*i,this.clippedInvContactDotSuspension=i}}else e.suspensionLength=this.suspensionRestLength,this.suspensionRelativeVelocity=0,e.directionWorld.scale(-1,e.hitNormalWorld),this.clippedInvContactDotSuspension=1}}const se=new a,ne=new a;class Si{constructor(t){this.chassisBody=t.chassisBody,this.wheelInfos=[],this.sliding=!1,this.world=null,this.indexRightAxis=typeof t.indexRightAxis<"u"?t.indexRightAxis:2,this.indexForwardAxis=typeof t.indexForwardAxis<"u"?t.indexForwardAxis:0,this.indexUpAxis=typeof t.indexUpAxis<"u"?t.indexUpAxis:1,this.constraints=[],this.preStepCallback=()=>{},this.currentVehicleSpeedKmHour=0,this.numWheelsOnGround=0}addWheel(t){t===void 0&&(t={});const e=new bs(t),s=this.wheelInfos.length;return this.wheelInfos.push(e),s}setSteeringValue(t,e){const s=this.wheelInfos[e];s.steering=t}applyEngineForce(t,e){this.wheelInfos[e].engineForce=t}setBrake(t,e){this.wheelInfos[e].brake=t}addToWorld(t){t.addBody(this.chassisBody);const e=this;this.preStepCallback=()=>{e.updateVehicle(t.dt)},t.addEventListener("preStep",this.preStepCallback),this.world=t}getVehicleAxisWorld(t,e){e.set(t===0?1:0,t===1?1:0,t===2?1:0),this.chassisBody.vectorToWorldFrame(e,e)}updateVehicle(t){const e=this.wheelInfos,s=e.length,n=this.chassisBody;for(let u=0;u<s;u++)this.updateWheelTransform(u);this.currentVehicleSpeedKmHour=3.6*n.velocity.length();const i=new a;this.getVehicleAxisWorld(this.indexForwardAxis,i),i.dot(n.velocity)<0&&(this.currentVehicleSpeedKmHour*=-1);for(let u=0;u<s;u++)this.castRay(e[u]);this.updateSuspension(t);const o=new a,r=new a;for(let u=0;u<s;u++){const d=e[u];let f=d.suspensionForce;f>d.maxSuspensionForce&&(f=d.maxSuspensionForce),d.raycastResult.hitNormalWorld.scale(f*t,o),d.raycastResult.hitPointWorld.vsub(n.position,r),n.applyImpulse(o,r)}this.updateFriction(t);const l=new a,c=new a,h=new a;for(let u=0;u<s;u++){const d=e[u];n.getVelocityAtWorldPoint(d.chassisConnectionPointWorld,h);let f=1;switch(this.indexUpAxis){case 1:f=-1;break}if(d.isInContact){this.getVehicleAxisWorld(this.indexForwardAxis,c);const p=c.dot(d.raycastResult.hitNormalWorld);d.raycastResult.hitNormalWorld.scale(p,l),c.vsub(l,c);const m=c.dot(h);d.deltaRotation=f*m*t/d.radius}(d.sliding||!d.isInContact)&&d.engineForce!==0&&d.useCustomSlidingRotationalSpeed&&(d.deltaRotation=(d.engineForce>0?1:-1)*d.customSlidingRotationalSpeed*t),Math.abs(d.brake)>Math.abs(d.engineForce)&&(d.deltaRotation=0),d.rotation+=d.deltaRotation,d.deltaRotation*=.99}}updateSuspension(t){const s=this.chassisBody.mass,n=this.wheelInfos,i=n.length;for(let o=0;o<i;o++){const r=n[o];if(r.isInContact){let l;const c=r.suspensionRestLength,h=r.suspensionLength,u=c-h;l=r.suspensionStiffness*u*r.clippedInvContactDotSuspension;const d=r.suspensionRelativeVelocity;let f;d<0?f=r.dampingCompression:f=r.dampingRelaxation,l-=f*d,r.suspensionForce=l*s,r.suspensionForce<0&&(r.suspensionForce=0)}else r.suspensionForce=0}}removeFromWorld(t){this.constraints,t.removeBody(this.chassisBody),t.removeEventListener("preStep",this.preStepCallback),this.world=null}castRay(t){const e=Ss,s=As;this.updateWheelTransformWorld(t);const n=this.chassisBody;let i=-1;const o=t.suspensionRestLength+t.radius;t.directionWorld.scale(o,e);const r=t.chassisConnectionPointWorld;r.vadd(e,s);const l=t.raycastResult;l.reset();const c=n.collisionResponse;n.collisionResponse=!1,this.world.rayTest(r,s,l),n.collisionResponse=c;const h=l.body;if(t.raycastResult.groundObject=0,h){i=l.distance,t.raycastResult.hitNormalWorld=l.hitNormalWorld,t.isInContact=!0;const u=l.distance;t.suspensionLength=u-t.radius;const d=t.suspensionRestLength-t.maxSuspensionTravel,f=t.suspensionRestLength+t.maxSuspensionTravel;t.suspensionLength<d&&(t.suspensionLength=d),t.suspensionLength>f&&(t.suspensionLength=f,t.raycastResult.reset());const p=t.raycastResult.hitNormalWorld.dot(t.directionWorld),m=new a;n.getVelocityAtWorldPoint(t.raycastResult.hitPointWorld,m);const y=t.raycastResult.hitNormalWorld.dot(m);if(p>=-.1)t.suspensionRelativeVelocity=0,t.clippedInvContactDotSuspension=1/.1;else{const w=-1/p;t.suspensionRelativeVelocity=y*w,t.clippedInvContactDotSuspension=w}}else t.suspensionLength=t.suspensionRestLength+0*t.maxSuspensionTravel,t.suspensionRelativeVelocity=0,t.directionWorld.scale(-1,t.raycastResult.hitNormalWorld),t.clippedInvContactDotSuspension=1;return i}updateWheelTransformWorld(t){t.isInContact=!1;const e=this.chassisBody;e.pointToWorldFrame(t.chassisConnectionPointLocal,t.chassisConnectionPointWorld),e.vectorToWorldFrame(t.directionLocal,t.directionWorld),e.vectorToWorldFrame(t.axleLocal,t.axleWorld)}updateWheelTransform(t){const e=Es,s=Cs,n=zs,i=this.wheelInfos[t];this.updateWheelTransformWorld(i),i.directionLocal.scale(-1,e),s.copy(i.axleLocal),e.cross(s,n),n.normalize(),s.normalize();const o=i.steering,r=new O;r.setFromAxisAngle(e,o);const l=new O;l.setFromAxisAngle(s,i.rotation);const c=i.worldTransform.quaternion;this.chassisBody.quaternion.mult(r,c),c.mult(l,c),c.normalize();const h=i.worldTransform.position;h.copy(i.directionWorld),h.scale(i.suspensionLength,h),h.vadd(i.chassisConnectionPointWorld,h)}getWheelTransformWorld(t){return this.wheelInfos[t].worldTransform}updateFriction(t){const e=Ms,s=this.wheelInfos,n=s.length,i=this.chassisBody,o=Rs,r=Fs;this.numWheelsOnGround=0;for(let h=0;h<n;h++){const u=s[h];u.raycastResult.body&&this.numWheelsOnGround++,u.sideImpulse=0,u.forwardImpulse=0,o[h]||(o[h]=new a),r[h]||(r[h]=new a)}for(let h=0;h<n;h++){const u=s[h],d=u.raycastResult.body;if(d){const f=r[h];this.getWheelTransformWorld(h).vectorToWorldFrame(Is[this.indexRightAxis],f);const m=u.raycastResult.hitNormalWorld,y=f.dot(m);m.scale(y,e),f.vsub(e,f),f.normalize(),m.cross(f,o[h]),o[h].normalize(),u.sideImpulse=Hs(i,u.raycastResult.hitPointWorld,d,u.raycastResult.hitPointWorld,f),u.sideImpulse*=Bs}}const l=1,c=.5;this.sliding=!1;for(let h=0;h<n;h++){const u=s[h],d=u.raycastResult.body;let f=0;if(u.slipInfo=1,d){const m=u.brake?u.brake:0;f=_s(i,d,u.raycastResult.hitPointWorld,o[h],m),f+=u.engineForce*t;const y=m/f;u.slipInfo*=y}if(u.forwardImpulse=0,u.skidInfo=1,d){u.skidInfo=1;const p=u.suspensionForce*t*u.frictionSlip,y=p*p;u.forwardImpulse=f;const w=u.forwardImpulse*c/u.forwardAcceleration,v=u.sideImpulse*l/u.sideAcceleration,g=w*w+v*v;if(u.sliding=!1,g>y){this.sliding=!0,u.sliding=!0;const x=p/Math.sqrt(g);u.skidInfo*=x}}}if(this.sliding)for(let h=0;h<n;h++){const u=s[h];u.sideImpulse!==0&&u.skidInfo<1&&(u.forwardImpulse*=u.skidInfo,u.sideImpulse*=u.skidInfo)}for(let h=0;h<n;h++){const u=s[h],d=new a;if(u.raycastResult.hitPointWorld.vsub(i.position,d),u.forwardImpulse!==0){const f=new a;o[h].scale(u.forwardImpulse,f),i.applyImpulse(f,d)}if(u.sideImpulse!==0){const f=u.raycastResult.body,p=new a;u.raycastResult.hitPointWorld.vsub(f.position,p);const m=new a;r[h].scale(u.sideImpulse,m),i.vectorToLocalFrame(d,d),d["xyz"[this.indexUpAxis]]*=u.rollInfluence,i.vectorToWorldFrame(d,d),i.applyImpulse(m,d),m.scale(-1,m),f.applyImpulse(m,p)}}}}new a;new a;new a;const Es=new a,Cs=new a,zs=new a;new H;new a;const Ss=new a,As=new a,Is=[new a(1,0,0),new a(0,1,0),new a(0,0,1)],Ms=new a,Fs=[],Rs=[],Bs=1,Ns=new a,Ts=new a,Ps=new a;function _s(R,t,e,s,n){let i=0;const o=e,r=Ns,l=Ts,c=Ps;R.getVelocityAtWorldPoint(o,r),t.getVelocityAtWorldPoint(o,l),r.vsub(l,c);const h=s.dot(c),u=ie(R,e,s),d=ie(t,e,s),p=1/(u+d);return i=-h*p,n<i&&(i=n),i<-n&&(i=-n),i}const Ls=new a,qs=new a,Ws=new a,Vs=new a;function ie(R,t,e){const s=Ls,n=qs,i=Ws,o=Vs;return t.vsub(R.position,s),s.cross(e,n),R.invInertiaWorld.vmult(n,o),o.cross(s,i),R.invMass+e.dot(i)}const js=new a,ks=new a,Os=new a;function Hs(R,t,e,s,n){if(n.lengthSquared()>1.1)return 0;const o=js,r=ks,l=Os;R.getVelocityAtWorldPoint(t,o),e.getVelocityAtWorldPoint(s,r),o.vsub(r,l);const c=n.dot(l),h=.2,u=1/(R.invMass+e.invMass);return-h*c*u}new a;new a;new a;new a;new a;new a;new a;new a;new a;class Ai extends ot{constructor(t,e,s,n){if(t===void 0&&(t=1),e===void 0&&(e=1),s===void 0&&(s=1),n===void 0&&(n=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const i=n,o=[],r=[],l=[],c=[],h=[],u=Math.cos,d=Math.sin;o.push(new a(-e*d(0),-s*.5,e*u(0))),c.push(0),o.push(new a(-t*d(0),s*.5,t*u(0))),h.push(1);for(let p=0;p<i;p++){const m=2*Math.PI/i*(p+1),y=2*Math.PI/i*(p+.5);p<i-1?(o.push(new a(-e*d(m),-s*.5,e*u(m))),c.push(2*p+2),o.push(new a(-t*d(m),s*.5,t*u(m))),h.push(2*p+3),l.push([2*p,2*p+1,2*p+3,2*p+2])):l.push([2*p,2*p+1,1,0]),(i%2===1||p<i/2)&&r.push(new a(-d(y),0,u(y)))}l.push(c),r.push(new a(0,1,0));const f=[];for(let p=0;p<h.length;p++)f.push(h[h.length-p-1]);l.push(f),super({vertices:o,faces:l,axes:r}),this.type=I.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=n}}class Ii extends I{constructor(){super({type:I.types.PARTICLE})}calculateLocalInertia(t,e){return e===void 0&&(e=new a),e.set(0,0,0),e}volume(){return 0}updateBoundingSphereRadius(){this.boundingSphereRadius=0}calculateWorldAABB(t,e,s,n){s.copy(t),n.copy(t)}}new a;class Mi extends I{constructor(t,e){e===void 0&&(e={}),e=At.defaults(e,{maxValue:null,minValue:null,elementSize:1}),super({type:I.types.HEIGHTFIELD}),this.data=t,this.maxValue=e.maxValue,this.minValue=e.minValue,this.elementSize=e.elementSize,e.minValue===null&&this.updateMinValue(),e.maxValue===null&&this.updateMaxValue(),this.cacheEnabled=!0,this.pillarConvex=new ot,this.pillarOffset=new a,this.updateBoundingSphereRadius(),this._cachedPillars={}}update(){this._cachedPillars={}}updateMinValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let n=0;n!==t[s].length;n++){const i=t[s][n];i<e&&(e=i)}this.minValue=e}updateMaxValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let n=0;n!==t[s].length;n++){const i=t[s][n];i>e&&(e=i)}this.maxValue=e}setHeightValueAtIndex(t,e,s){const n=this.data;n[t][e]=s,this.clearCachedConvexTrianglePillar(t,e,!1),t>0&&(this.clearCachedConvexTrianglePillar(t-1,e,!0),this.clearCachedConvexTrianglePillar(t-1,e,!1)),e>0&&(this.clearCachedConvexTrianglePillar(t,e-1,!0),this.clearCachedConvexTrianglePillar(t,e-1,!1)),e>0&&t>0&&this.clearCachedConvexTrianglePillar(t-1,e-1,!0)}getRectMinMax(t,e,s,n,i){i===void 0&&(i=[]);const o=this.data;let r=this.minValue;for(let l=t;l<=s;l++)for(let c=e;c<=n;c++){const h=o[l][c];h>r&&(r=h)}i[0]=this.minValue,i[1]=r}getIndexOfPosition(t,e,s,n){const i=this.elementSize,o=this.data;let r=Math.floor(t/i),l=Math.floor(e/i);return s[0]=r,s[1]=l,n&&(r<0&&(r=0),l<0&&(l=0),r>=o.length-1&&(r=o.length-1),l>=o[0].length-1&&(l=o[0].length-1)),!(r<0||l<0||r>=o.length-1||l>=o[0].length-1)}getTriangleAt(t,e,s,n,i,o){const r=oe;this.getIndexOfPosition(t,e,r,s);let l=r[0],c=r[1];const h=this.data;s&&(l=Math.min(h.length-2,Math.max(0,l)),c=Math.min(h[0].length-2,Math.max(0,c)));const u=this.elementSize,d=(t/u-l)**2+(e/u-c)**2,f=(t/u-(l+1))**2+(e/u-(c+1))**2,p=d>f;return this.getTriangle(l,c,p,n,i,o),p}getNormalAt(t,e,s,n){const i=Us,o=Xs,r=$s,l=Ks,c=Zs;this.getTriangleAt(t,e,s,i,o,r),o.vsub(i,l),r.vsub(i,c),l.cross(c,n),n.normalize()}getAabbAtIndex(t,e,s){let{lowerBound:n,upperBound:i}=s;const o=this.data,r=this.elementSize;n.set(t*r,e*r,o[t][e]),i.set((t+1)*r,(e+1)*r,o[t+1][e+1])}getHeightAt(t,e,s){const n=this.data,i=Ds,o=Gs,r=Ys,l=oe;this.getIndexOfPosition(t,e,l,s);let c=l[0],h=l[1];s&&(c=Math.min(n.length-2,Math.max(0,c)),h=Math.min(n[0].length-2,Math.max(0,h)));const u=this.getTriangleAt(t,e,s,i,o,r);Js(t,e,i.x,i.y,o.x,o.y,r.x,r.y,re);const d=re;return u?n[c+1][h+1]*d.x+n[c][h+1]*d.y+n[c+1][h]*d.z:n[c][h]*d.x+n[c+1][h]*d.y+n[c][h+1]*d.z}getCacheConvexTrianglePillarKey(t,e,s){return`${t}_${e}_${s?1:0}`}getCachedConvexTrianglePillar(t,e,s){return this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}setCachedConvexTrianglePillar(t,e,s,n,i){this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]={convex:n,offset:i}}clearCachedConvexTrianglePillar(t,e,s){delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}getTriangle(t,e,s,n,i,o){const r=this.data,l=this.elementSize;s?(n.set((t+1)*l,(e+1)*l,r[t+1][e+1]),i.set(t*l,(e+1)*l,r[t][e+1]),o.set((t+1)*l,e*l,r[t+1][e])):(n.set(t*l,e*l,r[t][e]),i.set((t+1)*l,e*l,r[t+1][e]),o.set(t*l,(e+1)*l,r[t][e+1]))}getConvexTrianglePillar(t,e,s){let n=this.pillarConvex,i=this.pillarOffset;if(this.cacheEnabled){const u=this.getCachedConvexTrianglePillar(t,e,s);if(u){this.pillarConvex=u.convex,this.pillarOffset=u.offset;return}n=new ot,i=new a,this.pillarConvex=n,this.pillarOffset=i}const o=this.data,r=this.elementSize,l=n.faces;n.vertices.length=6;for(let u=0;u<6;u++)n.vertices[u]||(n.vertices[u]=new a);l.length=5;for(let u=0;u<5;u++)l[u]||(l[u]=[]);const c=n.vertices,h=(Math.min(o[t][e],o[t+1][e],o[t][e+1],o[t+1][e+1])-this.minValue)/2+this.minValue;s?(i.set((t+.75)*r,(e+.75)*r,h),c[0].set(.25*r,.25*r,o[t+1][e+1]-h),c[1].set(-.75*r,.25*r,o[t][e+1]-h),c[2].set(.25*r,-.75*r,o[t+1][e]-h),c[3].set(.25*r,.25*r,-Math.abs(h)-1),c[4].set(-.75*r,.25*r,-Math.abs(h)-1),c[5].set(.25*r,-.75*r,-Math.abs(h)-1),l[0][0]=0,l[0][1]=1,l[0][2]=2,l[1][0]=5,l[1][1]=4,l[1][2]=3,l[2][0]=2,l[2][1]=5,l[2][2]=3,l[2][3]=0,l[3][0]=3,l[3][1]=4,l[3][2]=1,l[3][3]=0,l[4][0]=1,l[4][1]=4,l[4][2]=5,l[4][3]=2):(i.set((t+.25)*r,(e+.25)*r,h),c[0].set(-.25*r,-.25*r,o[t][e]-h),c[1].set(.75*r,-.25*r,o[t+1][e]-h),c[2].set(-.25*r,.75*r,o[t][e+1]-h),c[3].set(-.25*r,-.25*r,-Math.abs(h)-1),c[4].set(.75*r,-.25*r,-Math.abs(h)-1),c[5].set(-.25*r,.75*r,-Math.abs(h)-1),l[0][0]=0,l[0][1]=1,l[0][2]=2,l[1][0]=5,l[1][1]=4,l[1][2]=3,l[2][0]=0,l[2][1]=2,l[2][2]=5,l[2][3]=3,l[3][0]=1,l[3][1]=0,l[3][2]=3,l[3][3]=4,l[4][0]=4,l[4][1]=5,l[4][2]=2,l[4][3]=1),n.computeNormals(),n.computeEdges(),n.updateBoundingSphereRadius(),this.setCachedConvexTrianglePillar(t,e,s,n,i)}calculateLocalInertia(t,e){return e===void 0&&(e=new a),e.set(0,0,0),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){s.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),n.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE)}updateBoundingSphereRadius(){const t=this.data,e=this.elementSize;this.boundingSphereRadius=new a(t.length*e,t[0].length*e,Math.max(Math.abs(this.maxValue),Math.abs(this.minValue))).length()}setHeightsFromImage(t,e){const{x:s,z:n,y:i}=e,o=document.createElement("canvas");o.width=t.width,o.height=t.height;const r=o.getContext("2d");r.drawImage(t,0,0);const l=r.getImageData(0,0,t.width,t.height),c=this.data;c.length=0,this.elementSize=Math.abs(s)/l.width;for(let h=0;h<l.height;h++){const u=[];for(let d=0;d<l.width;d++){const f=l.data[(h*l.height+d)*4],p=l.data[(h*l.height+d)*4+1],m=l.data[(h*l.height+d)*4+2],y=(f+p+m)/4/255*n;s<0?u.push(y):u.unshift(y)}i<0?c.unshift(u):c.push(u)}this.updateMaxValue(),this.updateMinValue(),this.update()}}const oe=[],re=new a,Ds=new a,Gs=new a,Ys=new a,Us=new a,Xs=new a,$s=new a,Ks=new a,Zs=new a;function Js(R,t,e,s,n,i,o,r,l){l.x=((i-r)*(R-o)+(o-n)*(t-r))/((i-r)*(e-o)+(o-n)*(s-r)),l.y=((r-s)*(R-o)+(e-o)*(t-r))/((i-r)*(e-o)+(o-n)*(s-r)),l.z=1-l.x-l.y}new a;new X;new a;new X;new a;new a;new a;new a;new a;new a;new a;new X;new a;new V;new X;class Qs{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class tn extends Qs{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,l=e.bodies,c=l.length,h=t;let u,d,f,p,m,y;if(r!==0)for(let x=0;x!==c;x++)l[x].updateSolveMassProperties();const w=sn,v=nn,g=en;w.length=r,v.length=r,g.length=r;for(let x=0;x!==r;x++){const E=o[x];g[x]=0,v[x]=E.computeB(h),w[x]=1/E.computeC()}if(r!==0){for(let z=0;z!==c;z++){const M=l[z],N=M.vlambda,_=M.wlambda;N.set(0,0,0),_.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let z=0;z!==r;z++){const M=o[z];u=v[z],d=w[z],y=g[z],m=M.computeGWlambda(),f=d*(u-m-M.eps*y),y+f<M.minForce?f=M.minForce-y:y+f>M.maxForce&&(f=M.maxForce-y),g[z]+=f,p+=f>0?f:-f,M.addToWlambda(f)}if(p*p<i)break}for(let z=0;z!==c;z++){const M=l[z],N=M.velocity,_=M.angularVelocity;M.vlambda.vmul(M.linearFactor,M.vlambda),N.vadd(M.vlambda,N),M.wlambda.vmul(M.angularFactor,M.wlambda),_.vadd(M.wlambda,_)}let x=o.length;const E=1/h;for(;x--;)o[x].multiplier=g[x]*E}return s}}const en=[],sn=[],nn=[];F.STATIC;class on{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class rn extends on{constructor(){super(...arguments),this.type=a}constructObject(){return new a}}const j={sphereSphere:I.types.SPHERE,spherePlane:I.types.SPHERE|I.types.PLANE,boxBox:I.types.BOX|I.types.BOX,sphereBox:I.types.SPHERE|I.types.BOX,planeBox:I.types.PLANE|I.types.BOX,convexConvex:I.types.CONVEXPOLYHEDRON,sphereConvex:I.types.SPHERE|I.types.CONVEXPOLYHEDRON,planeConvex:I.types.PLANE|I.types.CONVEXPOLYHEDRON,boxConvex:I.types.BOX|I.types.CONVEXPOLYHEDRON,sphereHeightfield:I.types.SPHERE|I.types.HEIGHTFIELD,boxHeightfield:I.types.BOX|I.types.HEIGHTFIELD,convexHeightfield:I.types.CONVEXPOLYHEDRON|I.types.HEIGHTFIELD,sphereParticle:I.types.PARTICLE|I.types.SPHERE,planeParticle:I.types.PLANE|I.types.PARTICLE,boxParticle:I.types.BOX|I.types.PARTICLE,convexParticle:I.types.PARTICLE|I.types.CONVEXPOLYHEDRON,cylinderCylinder:I.types.CYLINDER,sphereCylinder:I.types.SPHERE|I.types.CYLINDER,planeCylinder:I.types.PLANE|I.types.CYLINDER,boxCylinder:I.types.BOX|I.types.CYLINDER,convexCylinder:I.types.CONVEXPOLYHEDRON|I.types.CYLINDER,heightfieldCylinder:I.types.HEIGHTFIELD|I.types.CYLINDER,particleCylinder:I.types.PARTICLE|I.types.CYLINDER,sphereTrimesh:I.types.SPHERE|I.types.TRIMESH,planeTrimesh:I.types.PLANE|I.types.TRIMESH};class ln{get[j.sphereSphere](){return this.sphereSphere}get[j.spherePlane](){return this.spherePlane}get[j.boxBox](){return this.boxBox}get[j.sphereBox](){return this.sphereBox}get[j.planeBox](){return this.planeBox}get[j.convexConvex](){return this.convexConvex}get[j.sphereConvex](){return this.sphereConvex}get[j.planeConvex](){return this.planeConvex}get[j.boxConvex](){return this.boxConvex}get[j.sphereHeightfield](){return this.sphereHeightfield}get[j.boxHeightfield](){return this.boxHeightfield}get[j.convexHeightfield](){return this.convexHeightfield}get[j.sphereParticle](){return this.sphereParticle}get[j.planeParticle](){return this.planeParticle}get[j.boxParticle](){return this.boxParticle}get[j.convexParticle](){return this.convexParticle}get[j.cylinderCylinder](){return this.convexConvex}get[j.sphereCylinder](){return this.sphereConvex}get[j.planeCylinder](){return this.planeConvex}get[j.boxCylinder](){return this.boxConvex}get[j.convexCylinder](){return this.convexConvex}get[j.heightfieldCylinder](){return this.heightfieldCylinder}get[j.particleCylinder](){return this.particleCylinder}get[j.sphereTrimesh](){return this.sphereTrimesh}get[j.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new rn,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new vt(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const l=this.currentContactMaterial;r.restitution=l.restitution,r.setSpookParams(l.contactEquationStiffness,l.contactEquationRelaxation,this.world.dt);const c=s.material||t.material,h=n.material||e.material;return c&&h&&c.restitution>=0&&h.restitution>=0&&(r.restitution=c.restitution*h.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,l=this.currentContactMaterial;let c=l.friction;const h=i.material||s.material,u=o.material||n.material;if(h&&u&&h.friction>=0&&u.friction>=0&&(c=h.friction*u.friction),c>0){const d=c*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,m=p.length?p.pop():new ee(s,n,d*f),y=p.length?p.pop():new ee(s,n,d*f);return m.bi=y.bi=s,m.bj=y.bj=n,m.minForce=y.minForce=-d*f,m.maxForce=y.maxForce=d*f,m.ri.copy(t.ri),m.rj.copy(t.rj),y.ri.copy(t.ri),y.rj.copy(t.rj),t.ni.tangents(m.t,y.t),m.setSpookParams(l.frictionEquationStiffness,l.frictionEquationRelaxation,r.dt),y.setSpookParams(l.frictionEquationStiffness,l.frictionEquationRelaxation,r.dt),m.enabled=y.enabled=t.enabled,e.push(m,y),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];rt.setZero(),at.setZero(),ht.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(rt.vadd(e.ni,rt),at.vadd(e.ri,at),ht.vadd(e.rj,ht)):(rt.vsub(e.ni,rt),at.vadd(e.rj,at),ht.vadd(e.ri,ht));const o=1/t;at.scale(o,s.ri),ht.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),rt.normalize(),rt.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const l=hn,c=dn,h=cn,u=an;for(let d=0,f=t.length;d!==f;d++){const p=t[d],m=e[d];let y=null;p.material&&m.material&&(y=s.getContactMaterial(p.material,m.material)||null);const w=p.type&F.KINEMATIC&&m.type&F.STATIC||p.type&F.STATIC&&m.type&F.KINEMATIC||p.type&F.KINEMATIC&&m.type&F.KINEMATIC;for(let v=0;v<p.shapes.length;v++){p.quaternion.mult(p.shapeOrientations[v],l),p.quaternion.vmult(p.shapeOffsets[v],h),h.vadd(p.position,h);const g=p.shapes[v];for(let x=0;x<m.shapes.length;x++){m.quaternion.mult(m.shapeOrientations[x],c),m.quaternion.vmult(m.shapeOffsets[x],u),u.vadd(m.position,u);const E=m.shapes[x];if(!(g.collisionFilterMask&E.collisionFilterGroup&&E.collisionFilterMask&g.collisionFilterGroup)||h.distanceTo(u)>g.boundingSphereRadius+E.boundingSphereRadius)continue;let z=null;g.material&&E.material&&(z=s.getContactMaterial(g.material,E.material)||null),this.currentContactMaterial=z||y||s.defaultContactMaterial;const M=g.type|E.type,N=this[M];if(N){let _=!1;g.type<E.type?_=N.call(this,g,E,h,u,l,c,p,m,g,E,w):_=N.call(this,E,g,u,h,c,l,m,p,g,E,w),_&&w&&(s.shapeOverlapKeeper.set(g.id,E.id),s.bodyOverlapKeeper.set(p.id,m.id))}}}}}sphereSphere(t,e,s,n,i,o,r,l,c,h,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const d=this.createContactEquation(r,l,t,e,c,h);n.vsub(s,d.ni),d.ni.normalize(),d.ri.copy(d.ni),d.rj.copy(d.ni),d.ri.scale(t.radius,d.ri),d.rj.scale(-e.radius,d.rj),d.ri.vadd(s,d.ri),d.ri.vsub(r.position,d.ri),d.rj.vadd(n,d.rj),d.rj.vsub(l.position,d.rj),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,l,c,h,u){const d=this.createContactEquation(r,l,t,e,c,h);if(d.ni.set(0,0,1),o.vmult(d.ni,d.ni),d.ni.negate(d.ni),d.ni.normalize(),d.ni.scale(t.radius,d.ri),s.vsub(n,zt),d.ni.scale(d.ni.dot(zt),le),zt.vsub(le,d.rj),-zt.dot(d.ni)<=t.radius){if(u)return!0;const f=d.ri,p=d.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(n,p),p.vsub(l.position,p),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,l,c,h,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,l,t,e,u)}sphereBox(t,e,s,n,i,o,r,l,c,h,u){const d=this.v3pool,f=qn;s.vsub(n,St),e.getSideNormals(f,o);const p=t.radius;let m=!1;const y=Vn,w=jn,v=kn;let g=null,x=0,E=0,z=0,M=null;for(let C=0,k=f.length;C!==k&&m===!1;C++){const L=Pn;L.copy(f[C]);const W=L.length();L.normalize();const Y=St.dot(L);if(Y<W+p&&Y>0){const G=_n,T=Ln;G.copy(f[(C+1)%3]),T.copy(f[(C+2)%3]);const ct=G.length(),xt=T.length();G.normalize(),T.normalize();const Ft=St.dot(G),Rt=St.dot(T);if(Ft<ct&&Ft>-ct&&Rt<xt&&Rt>-xt){const kt=Math.abs(Y-W-p);if((M===null||kt<M)&&(M=kt,E=Ft,z=Rt,g=W,y.copy(L),w.copy(G),v.copy(T),x++,u))return!0}}}if(x){m=!0;const C=this.createContactEquation(r,l,t,e,c,h);y.scale(-p,C.ri),C.ni.copy(y),C.ni.negate(C.ni),y.scale(g,y),w.scale(E,w),y.vadd(w,y),v.scale(z,v),y.vadd(v,C.rj),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.vadd(n,C.rj),C.rj.vsub(l.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult)}let N=d.get();const _=Wn;for(let C=0;C!==2&&!m;C++)for(let k=0;k!==2&&!m;k++)for(let L=0;L!==2&&!m;L++)if(N.set(0,0,0),C?N.vadd(f[0],N):N.vsub(f[0],N),k?N.vadd(f[1],N):N.vsub(f[1],N),L?N.vadd(f[2],N):N.vsub(f[2],N),n.vadd(N,_),_.vsub(s,_),_.lengthSquared()<p*p){if(u)return!0;m=!0;const W=this.createContactEquation(r,l,t,e,c,h);W.ri.copy(_),W.ri.normalize(),W.ni.copy(W.ri),W.ri.scale(p,W.ri),W.rj.copy(N),W.ri.vadd(s,W.ri),W.ri.vsub(r.position,W.ri),W.rj.vadd(n,W.rj),W.rj.vsub(l.position,W.rj),this.result.push(W),this.createFrictionEquationsFromContact(W,this.frictionResult)}d.release(N),N=null;const B=d.get(),P=d.get(),q=d.get(),b=d.get(),A=d.get(),S=f.length;for(let C=0;C!==S&&!m;C++)for(let k=0;k!==S&&!m;k++)if(C%3!==k%3){f[k].cross(f[C],B),B.normalize(),f[C].vadd(f[k],P),q.copy(s),q.vsub(P,q),q.vsub(n,q);const L=q.dot(B);B.scale(L,b);let W=0;for(;W===C%3||W===k%3;)W++;A.copy(s),A.vsub(b,A),A.vsub(P,A),A.vsub(n,A);const Y=Math.abs(L),G=A.length();if(Y<f[W].length()&&G<p){if(u)return!0;m=!0;const T=this.createContactEquation(r,l,t,e,c,h);P.vadd(b,T.rj),T.rj.copy(T.rj),A.negate(T.ni),T.ni.normalize(),T.ri.copy(T.rj),T.ri.vadd(n,T.ri),T.ri.vsub(s,T.ri),T.ri.normalize(),T.ri.scale(p,T.ri),T.ri.vadd(s,T.ri),T.ri.vsub(r.position,T.ri),T.rj.vadd(n,T.rj),T.rj.vsub(l.position,T.rj),this.result.push(T),this.createFrictionEquationsFromContact(T,this.frictionResult)}}d.release(B,P,q,b,A)}planeBox(t,e,s,n,i,o,r,l,c,h,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,l,t,e,u)}convexConvex(t,e,s,n,i,o,r,l,c,h,u,d,f){const p=si;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,p,d,f)){const m=[],y=ni;t.clipAgainstHull(s,i,e,n,o,p,-100,100,m);let w=0;for(let v=0;v!==m.length;v++){if(u)return!0;const g=this.createContactEquation(r,l,t,e,c,h),x=g.ri,E=g.rj;p.negate(g.ni),m[v].normal.negate(y),y.scale(m[v].depth,y),m[v].point.vadd(y,x),E.copy(m[v].point),x.vsub(s,x),E.vsub(n,E),x.vadd(s,x),x.vsub(r.position,x),E.vadd(n,E),E.vsub(l.position,E),this.result.push(g),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(g,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,l,c,h,u){const d=this.v3pool;s.vsub(n,On);const f=e.faceNormals,p=e.faces,m=e.vertices,y=t.radius;let w=!1;for(let v=0;v!==m.length;v++){const g=m[v],x=Yn;o.vmult(g,x),n.vadd(x,x);const E=Gn;if(x.vsub(s,E),E.lengthSquared()<y*y){if(u)return!0;w=!0;const z=this.createContactEquation(r,l,t,e,c,h);z.ri.copy(E),z.ri.normalize(),z.ni.copy(z.ri),z.ri.scale(y,z.ri),x.vsub(n,z.rj),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),z.rj.vadd(n,z.rj),z.rj.vsub(l.position,z.rj),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult);return}}for(let v=0,g=p.length;v!==g&&w===!1;v++){const x=f[v],E=p[v],z=Un;o.vmult(x,z);const M=Xn;o.vmult(m[E[0]],M),M.vadd(n,M);const N=$n;z.scale(-y,N),s.vadd(N,N);const _=Kn;N.vsub(M,_);const B=_.dot(z),P=Zn;if(s.vsub(M,P),B<0&&P.dot(z)>0){const q=[];for(let b=0,A=E.length;b!==A;b++){const S=d.get();o.vmult(m[E[b]],S),n.vadd(S,S),q.push(S)}if(Tn(q,z,s)){if(u)return!0;w=!0;const b=this.createContactEquation(r,l,t,e,c,h);z.scale(-y,b.ri),z.negate(b.ni);const A=d.get();z.scale(-B,A);const S=d.get();z.scale(-y,S),s.vsub(n,b.rj),b.rj.vadd(S,b.rj),b.rj.vadd(A,b.rj),b.rj.vadd(n,b.rj),b.rj.vsub(l.position,b.rj),b.ri.vadd(s,b.ri),b.ri.vsub(r.position,b.ri),d.release(A),d.release(S),this.result.push(b),this.createFrictionEquationsFromContact(b,this.frictionResult);for(let C=0,k=q.length;C!==k;C++)d.release(q[C]);return}else for(let b=0;b!==E.length;b++){const A=d.get(),S=d.get();o.vmult(m[E[(b+1)%E.length]],A),o.vmult(m[E[(b+2)%E.length]],S),n.vadd(A,A),n.vadd(S,S);const C=Hn;S.vsub(A,C);const k=Dn;C.unit(k);const L=d.get(),W=d.get();s.vsub(A,W);const Y=W.dot(k);k.scale(Y,L),L.vadd(A,L);const G=d.get();if(L.vsub(s,G),Y>0&&Y*Y<C.lengthSquared()&&G.lengthSquared()<y*y){if(u)return!0;const T=this.createContactEquation(r,l,t,e,c,h);L.vsub(n,T.rj),L.vsub(s,T.ni),T.ni.normalize(),T.ni.scale(y,T.ri),T.rj.vadd(n,T.rj),T.rj.vsub(l.position,T.rj),T.ri.vadd(s,T.ri),T.ri.vsub(r.position,T.ri),this.result.push(T),this.createFrictionEquationsFromContact(T,this.frictionResult);for(let ct=0,xt=q.length;ct!==xt;ct++)d.release(q[ct]);d.release(A),d.release(S),d.release(L),d.release(G),d.release(W);return}d.release(A),d.release(S),d.release(L),d.release(G),d.release(W)}for(let b=0,A=q.length;b!==A;b++)d.release(q[b])}}}planeConvex(t,e,s,n,i,o,r,l,c,h,u){const d=Jn,f=Qn;f.set(0,0,1),i.vmult(f,f);let p=0;const m=ti;for(let y=0;y!==e.vertices.length;y++)if(d.copy(e.vertices[y]),o.vmult(d,d),n.vadd(d,d),d.vsub(s,m),f.dot(m)<=0){if(u)return!0;const v=this.createContactEquation(r,l,t,e,c,h),g=ei;f.scale(f.dot(m),g),d.vsub(g,g),g.vsub(s,v.ri),v.ni.copy(f),d.vsub(n,v.rj),v.ri.vadd(s,v.ri),v.ri.vsub(r.position,v.ri),v.rj.vadd(n,v.rj),v.rj.vsub(l.position,v.rj),this.result.push(v),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(v,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,o,r,l,c,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,l,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,l,c,h,u){const d=e.data,f=t.radius,p=e.elementSize,m=mi,y=fi;V.pointToLocalFrame(n,o,s,y);let w=Math.floor((y.x-f)/p)-1,v=Math.ceil((y.x+f)/p)+1,g=Math.floor((y.y-f)/p)-1,x=Math.ceil((y.y+f)/p)+1;if(v<0||x<0||w>d.length||g>d[0].length)return;w<0&&(w=0),v<0&&(v=0),g<0&&(g=0),x<0&&(x=0),w>=d.length&&(w=d.length-1),v>=d.length&&(v=d.length-1),x>=d[0].length&&(x=d[0].length-1),g>=d[0].length&&(g=d[0].length-1);const E=[];e.getRectMinMax(w,g,v,x,E);const z=E[0],M=E[1];if(y.z-f>M||y.z+f<z)return;const N=this.result;for(let _=w;_<v;_++)for(let B=g;B<x;B++){const P=N.length;let q=!1;if(e.getConvexTrianglePillar(_,B,!1),V.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(q=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,l,t,e,u)),u&&q||(e.getConvexTrianglePillar(_,B,!0),V.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(q=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,l,t,e,u)),u&&q))return!0;if(N.length-P>2)return}}boxHeightfield(t,e,s,n,i,o,r,l,c,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,l,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,l,c,h,u){const d=e.data,f=e.elementSize,p=t.boundingSphereRadius,m=ui,y=pi,w=di;V.pointToLocalFrame(n,o,s,w);let v=Math.floor((w.x-p)/f)-1,g=Math.ceil((w.x+p)/f)+1,x=Math.floor((w.y-p)/f)-1,E=Math.ceil((w.y+p)/f)+1;if(g<0||E<0||v>d.length||x>d[0].length)return;v<0&&(v=0),g<0&&(g=0),x<0&&(x=0),E<0&&(E=0),v>=d.length&&(v=d.length-1),g>=d.length&&(g=d.length-1),E>=d[0].length&&(E=d[0].length-1),x>=d[0].length&&(x=d[0].length-1);const z=[];e.getRectMinMax(v,x,g,E,z);const M=z[0],N=z[1];if(!(w.z-p>N||w.z+p<M))for(let _=v;_<g;_++)for(let B=x;B<E;B++){let P=!1;if(e.getConvexTrianglePillar(_,B,!1),V.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(P=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,l,null,null,u,y,null)),u&&P||(e.getConvexTrianglePillar(_,B,!0),V.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(P=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,l,null,null,u,y,null)),u&&P))return!0}}sphereParticle(t,e,s,n,i,o,r,l,c,h,u){const d=li;if(d.set(0,0,1),n.vsub(s,d),d.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(l,r,e,t,c,h);d.normalize(),p.rj.copy(d),p.rj.scale(t.radius,p.rj),p.ni.copy(d),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,l,c,h,u){const d=ii;d.set(0,0,1),r.quaternion.vmult(d,d);const f=oi;if(n.vsub(r.position,f),d.dot(f)<=0){if(u)return!0;const m=this.createContactEquation(l,r,e,t,c,h);m.ni.copy(d),m.ni.negate(m.ni),m.ri.set(0,0,0);const y=ri;d.scale(d.dot(n),y),n.vsub(y,y),m.rj.copy(y),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,l,c,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,l,t,e,u)}convexParticle(t,e,s,n,i,o,r,l,c,h,u){let d=-1;const f=ai,p=hi;let m=null;const y=ci;if(y.copy(n),y.vsub(s,y),i.conjugate(ce),ce.vmult(y,y),t.pointIsInside(y)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,v=t.faces.length;w!==v;w++){const g=[t.worldVertices[t.faces[w][0]]],x=t.worldFaceNormals[w];n.vsub(g[0],ae);const E=-x.dot(ae);if(m===null||Math.abs(E)<Math.abs(m)){if(u)return!0;m=E,d=w,f.copy(x)}}if(d!==-1){const w=this.createContactEquation(l,r,e,t,c,h);f.scale(m,p),p.vadd(n,p),p.vsub(s,p),w.rj.copy(p),f.negate(w.ni),w.ri.set(0,0,0);const v=w.ri,g=w.rj;v.vadd(n,v),v.vsub(l.position,v),g.vadd(s,g),g.vsub(r.position,g),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,l,c,h,u){return this.convexHeightfield(e,t,n,s,o,i,l,r,c,h,u)}particleCylinder(t,e,s,n,i,o,r,l,c,h,u){return this.convexParticle(e,t,n,s,o,i,l,r,c,h,u)}sphereTrimesh(t,e,s,n,i,o,r,l,c,h,u){const d=gn,f=xn,p=bn,m=En,y=Cn,w=zn,v=Mn,g=wn,x=vn,E=Fn;V.pointToLocalFrame(n,o,s,y);const z=t.radius;v.lowerBound.set(y.x-z,y.y-z,y.z-z),v.upperBound.set(y.x+z,y.y+z,y.z+z),e.getTrianglesInAABB(v,E);const M=yn,N=t.radius*t.radius;for(let b=0;b<E.length;b++)for(let A=0;A<3;A++)if(e.getVertex(e.indices[E[b]*3+A],M),M.vsub(y,x),x.lengthSquared()<=N){if(g.copy(M),V.pointToWorldFrame(n,o,g,M),M.vsub(s,x),u)return!0;let S=this.createContactEquation(r,l,t,e,c,h);S.ni.copy(x),S.ni.normalize(),S.ri.copy(S.ni),S.ri.scale(t.radius,S.ri),S.ri.vadd(s,S.ri),S.ri.vsub(r.position,S.ri),S.rj.copy(M),S.rj.vsub(l.position,S.rj),this.result.push(S),this.createFrictionEquationsFromContact(S,this.frictionResult)}for(let b=0;b<E.length;b++)for(let A=0;A<3;A++){e.getVertex(e.indices[E[b]*3+A],d),e.getVertex(e.indices[E[b]*3+(A+1)%3],f),f.vsub(d,p),y.vsub(f,w);const S=w.dot(p);y.vsub(d,w);let C=w.dot(p);if(C>0&&S<0&&(y.vsub(d,w),m.copy(p),m.normalize(),C=w.dot(m),m.scale(C,w),w.vadd(d,w),w.distanceTo(y)<t.radius)){if(u)return!0;const L=this.createContactEquation(r,l,t,e,c,h);w.vsub(y,L.ni),L.ni.normalize(),L.ni.scale(t.radius,L.ri),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),V.pointToWorldFrame(n,o,w,w),w.vsub(l.position,L.rj),V.vectorToWorldFrame(o,L.ni,L.ni),V.vectorToWorldFrame(o,L.ri,L.ri),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}}const _=Sn,B=An,P=In,q=mn;for(let b=0,A=E.length;b!==A;b++){e.getTriangleVertices(E[b],_,B,P),e.getNormal(E[b],q),y.vsub(_,w);let S=w.dot(q);if(q.scale(S,w),y.vsub(w,w),S=w.distanceTo(y),H.pointInTriangle(w,_,B,P)&&S<t.radius){if(u)return!0;let C=this.createContactEquation(r,l,t,e,c,h);w.vsub(y,C.ni),C.ni.normalize(),C.ni.scale(t.radius,C.ri),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),V.pointToWorldFrame(n,o,w,w),w.vsub(l.position,C.rj),V.vectorToWorldFrame(o,C.ni,C.ni),V.vectorToWorldFrame(o,C.ri,C.ri),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult)}}E.length=0}planeTrimesh(t,e,s,n,i,o,r,l,c,h,u){const d=new a,f=un;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,d);const m=new a;m.copy(d),V.pointToWorldFrame(n,o,m,d);const y=pn;if(d.vsub(s,y),f.dot(y)<=0){if(u)return!0;const v=this.createContactEquation(r,l,t,e,c,h);v.ni.copy(f);const g=fn;f.scale(y.dot(f),g),d.vsub(g,g),v.ri.copy(g),v.ri.vsub(r.position,v.ri),v.rj.copy(d),v.rj.vsub(l.position,v.rj),this.result.push(v),this.createFrictionEquationsFromContact(v,this.frictionResult)}}}}const rt=new a,at=new a,ht=new a,cn=new a,an=new a,hn=new O,dn=new O,un=new a,pn=new a,fn=new a,mn=new a,vn=new a;new a;const yn=new a,wn=new a,gn=new a,xn=new a,bn=new a,En=new a,Cn=new a,zn=new a,Sn=new a,An=new a,In=new a,Mn=new X,Fn=[],zt=new a,le=new a,Rn=new a,Bn=new a,Nn=new a;function Tn(R,t,e){let s=null;const n=R.length;for(let i=0;i!==n;i++){const o=R[i],r=Rn;R[(i+1)%n].vsub(o,r);const l=Bn;r.cross(t,l);const c=Nn;e.vsub(o,c);const h=l.dot(c);if(s===null||h>0&&s===!0||h<=0&&s===!1){s===null&&(s=h>0);continue}else return!1}return!0}const St=new a,Pn=new a,_n=new a,Ln=new a,qn=[new a,new a,new a,new a,new a,new a],Wn=new a,Vn=new a,jn=new a,kn=new a,On=new a,Hn=new a,Dn=new a,Gn=new a,Yn=new a,Un=new a,Xn=new a,$n=new a,Kn=new a,Zn=new a;new a;new a;const Jn=new a,Qn=new a,ti=new a,ei=new a,si=new a,ni=new a,ii=new a,oi=new a,ri=new a,li=new a,ce=new O,ci=new a;new a;const ai=new a,ae=new a,hi=new a,di=new a,ui=new a,pi=[0],fi=new a,mi=new a;class he{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let l=0;l<i;l++){let c=!1;const h=s[l];for(;h>n[r];)r++;c=h===n[r],c||de(t,h)}r=0;for(let l=0;l<o;l++){let c=!1;const h=n[l];for(;h>s[r];)r++;c=s[r]===h,c||de(e,h)}}}function de(R,t){R.push((t&4294901760)>>16,t&65535)}const _t=(R,t)=>R<t?`${R}-${t}`:`${t}-${R}`;class vi{constructor(){this.data={keys:[]}}get(t,e){const s=_t(t,e);return this.data[s]}set(t,e,s){const n=_t(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=_t(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class Fi extends ue{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new a,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new a,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new Ue,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new tn,this.constraints=[],this.narrowphase=new ln(this),this.collisionMatrix=new Gt,this.collisionMatrixPrevious=new Gt,this.bodyOverlapKeeper=new he,this.shapeOverlapKeeper=new he,this.contactmaterials=[],this.contactMaterialTable=new vi,this.defaultMaterial=new Mt("default"),this.defaultContactMaterial=new It(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof yt?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=H.ALL,s.from=t,s.to=e,s.callback=n,Lt.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=H.ANY,s.from=t,s.to=e,s.result=n,Lt.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=H.CLOSEST,s.from=t,s.to=e,s.result=n,Lt.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof F&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=D.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=D.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(D.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const l=this.bodies[r];l.previousPosition.lerp(l.position,o,l.interpolatedPosition),l.previousQuaternion.slerp(l.quaternion,o,l.interpolatedQuaternion),l.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=bi,n=Ei,i=this.bodies.length,o=this.bodies,r=this.solver,l=this.gravity,c=this.doProfiling,h=this.profile,u=F.DYNAMIC;let d=-1/0;const f=this.constraints,p=xi;l.length();const m=l.x,y=l.y,w=l.z;let v=0;for(c&&(d=D.now()),v=0;v!==i;v++){const b=o[v];if(b.type===u){const A=b.force,S=b.mass;A.x+=S*m,A.y+=S*y,A.z+=S*w}}for(let b=0,A=this.subsystems.length;b!==A;b++)this.subsystems[b].update();c&&(d=D.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),c&&(h.broadphase=D.now()-d);let g=f.length;for(v=0;v!==g;v++){const b=f[v];if(!b.collideConnected)for(let A=s.length-1;A>=0;A-=1)(b.bodyA===s[A]&&b.bodyB===n[A]||b.bodyB===s[A]&&b.bodyA===n[A])&&(s.splice(A,1),n.splice(A,1))}this.collisionMatrixTick(),c&&(d=D.now());const x=gi,E=e.length;for(v=0;v!==E;v++)x.push(e[v]);e.length=0;const z=this.frictionEquations.length;for(v=0;v!==z;v++)p.push(this.frictionEquations[v]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,x,this.frictionEquations,p),c&&(h.narrowphase=D.now()-d),c&&(d=D.now()),v=0;v<this.frictionEquations.length;v++)r.addEquation(this.frictionEquations[v]);const M=e.length;for(let b=0;b!==M;b++){const A=e[b],S=A.bi,C=A.bj,k=A.si,L=A.sj;let W;if(S.material&&C.material?W=this.getContactMaterial(S.material,C.material)||this.defaultContactMaterial:W=this.defaultContactMaterial,W.friction,S.material&&C.material&&(S.material.friction>=0&&C.material.friction>=0&&S.material.friction*C.material.friction,S.material.restitution>=0&&C.material.restitution>=0&&(A.restitution=S.material.restitution*C.material.restitution)),r.addEquation(A),S.allowSleep&&S.type===F.DYNAMIC&&S.sleepState===F.SLEEPING&&C.sleepState===F.AWAKE&&C.type!==F.STATIC){const Y=C.velocity.lengthSquared()+C.angularVelocity.lengthSquared(),G=C.sleepSpeedLimit**2;Y>=G*2&&(S.wakeUpAfterNarrowphase=!0)}if(C.allowSleep&&C.type===F.DYNAMIC&&C.sleepState===F.SLEEPING&&S.sleepState===F.AWAKE&&S.type!==F.STATIC){const Y=S.velocity.lengthSquared()+S.angularVelocity.lengthSquared(),G=S.sleepSpeedLimit**2;Y>=G*2&&(C.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(S,C,!0),this.collisionMatrixPrevious.get(S,C)||(ut.body=C,ut.contact=A,S.dispatchEvent(ut),ut.body=S,C.dispatchEvent(ut)),this.bodyOverlapKeeper.set(S.id,C.id),this.shapeOverlapKeeper.set(k.id,L.id)}for(this.emitContactEvents(),c&&(h.makeContactConstraints=D.now()-d,d=D.now()),v=0;v!==i;v++){const b=o[v];b.wakeUpAfterNarrowphase&&(b.wakeUp(),b.wakeUpAfterNarrowphase=!1)}for(g=f.length,v=0;v!==g;v++){const b=f[v];b.update();for(let A=0,S=b.equations.length;A!==S;A++){const C=b.equations[A];r.addEquation(C)}}r.solve(t,this),c&&(h.solve=D.now()-d),r.removeAllEquations();const N=Math.pow;for(v=0;v!==i;v++){const b=o[v];if(b.type&u){const A=N(1-b.linearDamping,t),S=b.velocity;S.scale(A,S);const C=b.angularVelocity;if(C){const k=N(1-b.angularDamping,t);C.scale(k,C)}}}this.dispatchEvent(wi),c&&(d=D.now());const B=this.stepnumber%(this.quatNormalizeSkip+1)===0,P=this.quatNormalizeFast;for(v=0;v!==i;v++)o[v].integrate(t,B,P);this.clearForces(),this.broadphase.dirty=!0,c&&(h.integrate=D.now()-d),this.stepnumber+=1,this.dispatchEvent(yi);let q=!0;if(this.allowSleep)for(q=!1,v=0;v!==i;v++){const b=o[v];b.sleepTick(this.time),b.sleepState!==F.SLEEPING&&(q=!0)}this.hasActiveBodies=q}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(tt,et),t){for(let i=0,o=tt.length;i<o;i+=2)pt.bodyA=this.getBodyById(tt[i]),pt.bodyB=this.getBodyById(tt[i+1]),this.dispatchEvent(pt);pt.bodyA=pt.bodyB=null}if(e){for(let i=0,o=et.length;i<o;i+=2)ft.bodyA=this.getBodyById(et[i]),ft.bodyB=this.getBodyById(et[i+1]),this.dispatchEvent(ft);ft.bodyA=ft.bodyB=null}tt.length=et.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(tt,et),s){for(let i=0,o=tt.length;i<o;i+=2){const r=this.getShapeById(tt[i]),l=this.getShapeById(tt[i+1]);st.shapeA=r,st.shapeB=l,r&&(st.bodyA=r.body),l&&(st.bodyB=l.body),this.dispatchEvent(st)}st.bodyA=st.bodyB=st.shapeA=st.shapeB=null}if(n){for(let i=0,o=et.length;i<o;i+=2){const r=this.getShapeById(et[i]),l=this.getShapeById(et[i+1]);nt.shapeA=r,nt.shapeB=l,r&&(nt.bodyA=r.body),l&&(nt.bodyB=l.body),this.dispatchEvent(nt)}nt.bodyA=nt.bodyB=nt.shapeA=nt.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new X;const Lt=new H,D=globalThis.performance||{};if(!D.now){let R=Date.now();D.timing&&D.timing.navigationStart&&(R=D.timing.navigationStart),D.now=()=>Date.now()-R}new a;const yi={type:"postStep"},wi={type:"preStep"},ut={type:F.COLLIDE_EVENT_NAME,body:null,contact:null},gi=[],xi=[],bi=[],Ei=[],tt=[],et=[],pt={type:"beginContact",bodyA:null,bodyB:null},ft={type:"endContact",bodyA:null,bodyB:null},st={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},nt={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};export{F as B,Ai as C,zi as D,ue as E,Mi as H,Mt as M,Ci as P,O as Q,Si as R,I as S,a as V,Fi as W,Ii as a,qt as b,It as c,mt as d};
